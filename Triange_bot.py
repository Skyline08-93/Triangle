import ccxt
import time
import requests
import os
from datetime import datetime

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
FEE = 0.001
MIN_PROFIT_PCT = 0.5
MIN_LIQUIDITY = 100
MAX_LIQUIDITY = 500000
TRADE_USD = 100

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway .env) ===
API_KEY = os.environ.get('API_KEY')
SECRET = os.environ.get('SECRET')
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
CHAT_ID = os.environ.get('CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not API_KEY or not SECRET:
    raise Exception("‚ùå API_KEY –∏ SECRET –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏—Ö –≤ Railway ‚Üí Variables")

# === –¢–∏–ø—ã –º–æ–Ω–µ—Ç ===
STABLES = {'USDT', 'USDC', 'DAI', 'USDE', 'USDR', 'TUSD', 'BUSD'}
BASE_COINS = {'BTC', 'ETH', 'BNB', 'SOL'}

def get_symbol_type(symbol):
    if symbol in STABLES:
        return 'stable'
    elif symbol in BASE_COINS:
        return 'base'
    else:
        return 'alt'

# === Telegram ===
def send_telegram_message(text):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.post(url, data={'chat_id': CHAT_ID, 'text': text, 'parse_mode': 'HTML'})
    except:
        pass

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit ===
bybit = ccxt.bybit({
    'apiKey': API_KEY,
    'secret': SECRET,
    'enableRateLimit': True,
    'timeout': 15000,
    'options': {'defaultType': 'spot'}
})

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ===
markets = bybit.load_markets({'type': 'spot'})
all_symbols = list(markets.keys())

unique_symbols = set()
for s in all_symbols:
    if '/' in s:
        base, quote = s.split('/')
        unique_symbols.add(base)
        unique_symbols.add(quote)

symbol_types = {sym: get_symbol_type(sym) for sym in unique_symbols}

base_symbols = {s.split('/')[0] for s in all_symbols if any(s.endswith(f'/{sfx}') for sfx in STABLES)}

routes = []
for s in STABLES:
    for a in base_symbols:
        for b in base_symbols:
            if a == b:
                continue
            pair1 = f"{a}/{s}"
            if pair1 not in markets:
                continue
            if f"{b}/{a}" in markets:
                pair2 = f"{b}/{a}"
                invert2 = True
            elif f"{a}/{b}" in markets:
                pair2 = f"{a}/{b}"
                invert2 = False
            else:
                continue
            pair3 = f"{b}/{s}"
            if pair3 in markets:
                routes.append((pair1, pair2, pair3, invert2))

print(f"üîÅ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(routes)}")

# === –°—Ç–∞–∫–∞–Ω—ã –∏ —Ü–µ–Ω—ã ===
def get_orderbook(symbol):
    try:
        return bybit.fetch_order_book(symbol)
    except:
        return {'asks': [], 'bids': []}

def get_best_price(book, side, amount_needed):
    total = 0
    qty = 0
    for price, volume in book[side]:
        deal = price * volume
        if total + deal >= amount_needed:
            partial = (amount_needed - total) / price
            qty += partial
            total += partial * price
            break
        total += deal
        qty += volume
    if qty == 0:
        return None, 0
    avg_price = total / qty
    return avg_price, total

def get_second_leg_price(book_func, coinA, coinB, amount_a, markets, fee=FEE):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–∞ coinA/coinB –∏–ª–∏ coinB/coinA,
    –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ coinB, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –ø–∞—Ä—É, —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–∫–∞–Ω–∞ –∏ —Ü–µ–Ω—É.
    """
    pair_ab = f"{coinA}/{coinB}"
    pair_ba = f"{coinB}/{coinA}"

    if pair_ab in markets:
        book = book_func(pair_ab)
        if not book or not book['bids']:
            return None
        price, _ = get_best_price(book, 'bids', amount_a)
        if not price:
            return None
        amount_b = amount_a * price * (1 - fee)
        return amount_b, pair_ab, 'bids', price

    elif pair_ba in markets:
        book = book_func(pair_ba)
        if not book or not book['asks']:
            return None
        price, _ = get_best_price(book, 'asks', amount_a)
        if not price:
            return None
        amount_b = amount_a / price * (1 - fee)
        return amount_b, pair_ba, 'asks', price

    else:
        # –ü–∞—Ä—ã –Ω–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ
        return None

def calc_triangle(p1, p2, p3, invert2):
    coinA = p1.split('/')[0]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–Ω–µ—Ç–∞ A (–Ω–∞–ø—Ä–∏–º–µ—Ä, INJ)
    quote = p1.split('/')[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, USDT

    # –í—Ç–æ—Ä–∞—è –º–æ–Ω–µ—Ç–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ ‚Äî —Ç–∞, —á—Ç–æ –≤ p2
    # –ù–æ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –≤—ã–¥–µ–ª–∏–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é "/"
    parts2 = p2.split('/')
    coinB_candidates = set(parts2)

    # coinB ‚Äî —ç—Ç–æ –º–æ–Ω–µ—Ç–∞ –≤ p2, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Ä–∞–≤–Ω–∞ coinA
    coinB = (coinB_candidates - {coinA}).pop()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
    book1 = get_orderbook(p1)
    if not book1 or not book1['asks']:
        return
    p1_price, spent_usdt = get_best_price(book1, 'asks', TRADE_USD)
    if not p1_price:
        return
    amount_a = TRADE_USD / p1_price * (1 - FEE)
    liq1 = book1['asks'][0][0] * book1['asks'][0][1]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
    second_leg = get_second_leg_price(get_orderbook, coinA, coinB, amount_a, markets, fee=FEE)
    if not second_leg:
        return
    amount_b, used_pair, side_used, p2_price = second_leg
    liq2_side = 'asks' if side_used == 'asks' else 'bids'
    liq2 = get_orderbook(used_pair)[liq2_side][0][0] * get_orderbook(used_pair)[liq2_side][0][1]

    # –¢—Ä–µ—Ç–∏–π —à–∞–≥ ‚Äî –ø—Ä–æ–¥–∞—Ç—å coinB –∑–∞ quote (USDT –∏–ª–∏ stable)
    book3 = get_orderbook(p3)
    if not book3 or not book3['bids']:
        return
    p3_price, _ = get_best_price(book3, 'bids', amount_b)
    if not p3_price:
        return
    total_usdt = amount_b * p3_price * (1 - FEE)
    liq3 = book3['bids'][0][0] * book3['bids'][0][1]

    min_liq = min(liq1, liq2, liq3)
    if min_liq < MIN_LIQUIDITY or min_liq > MAX_LIQUIDITY:
        return

    if total_usdt <= 0 or total_usdt > 10 * TRADE_USD:
        return

    profit = total_usdt - TRADE_USD
    pct = (profit / TRADE_USD) * 100

    if pct >= MIN_PROFIT_PCT:
        now = datetime.now().strftime('%H:%M:%S')
        msg = (
            f"<b>[{now}]</b>\n"
            f"üü• 1. {p1} - {p1_price:.6f}, —Å—Ç–∞–∫–∞–Ω: ${liq1:,.0f}\n"
            f"{'üü¢' if side_used == 'bids' else 'üü•'} 2. {used_pair} - {p2_price:.6f}, —Å—Ç–∞–∫–∞–Ω: ${liq2:,.0f}\n"
            f"üü¢ 3. {p3} - {p3_price:.6f}, —Å—Ç–∞–∫–∞–Ω: ${liq3:,.0f}\n\n"
            f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>{profit:.2f} USDT</b>\n"
            f"üìà –°–ø—Ä–µ–¥: <b>{pct:.2f}%</b>\n"
            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: <b>{min_liq:,.0f} USDT</b>"
        )
        send_telegram_message(msg)

    return profit, pct, min_liq

# === –¶–∏–∫–ª ===
def main():
    while True:
        results = []
        for i, (p1, p2, p3, invert2) in enumerate(routes):
            print(f"üîç [{i+1}/{len(routes)}] {p1} ‚Üí {p2} ‚Üí {p3}")
            try:
                res = calc_triangle(p1, p2, p3, invert2)
                if res:
                    results.append((p1, p2, p3, *res))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            time.sleep(0.1)

        results = [r for r in results if 0 < r[4] < 10]
        results.sort(key=lambda x: x[4], reverse=True)

        print("\033c")  # –æ—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        print("üìà –¢–û–ü-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        for i, (a, b, c, profit, pct, vol) in enumerate(results[:10]):
            print(f"{i+1}. {a} ‚Üí {b} ‚Üí {c}")
            print(f"   üîπ –ü—Ä–∏–±—ã–ª—å: {profit:.4f} USDT | –°–ø—Ä–µ–¥: {pct:.2f}% | –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {vol:,.0f} USDT\n")

        print("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)

if __name__ == '__main__':
    main()