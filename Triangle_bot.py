import ccxt
import time
import requests
import os
from datetime import datetime
from colorama import Fore, init
init(autoreset=True)

API_KEY = os.getenv('API_KEY')
SECRET = os.getenv('SECRET')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

FEE = 0.001
MIN_PROFIT_PCT = 0.5
MIN_LIQUIDITY = 100
MAX_LIQUIDITY = 500000
TRADE_USD = 100

STABLES = {'USDT', 'USDC', 'DAI', 'USDE', 'USDR', 'TUSD', 'BUSD'}
BASE_COINS = {'BTC', 'ETH', 'BNB', 'SOL'}

def get_symbol_type(symbol):
    if symbol in STABLES:
        return 'stable'
    elif symbol in BASE_COINS:
        return 'base'
    else:
        return 'alt'

bybit = ccxt.bybit({
    'apiKey': API_KEY,
    'secret': SECRET,
    'enableRateLimit': True,
    'timeout': 15000,
    'options': {'defaultType': 'spot'}
})

markets = bybit.load_markets({'type': 'spot'})
all_symbols = list(markets.keys())

unique_symbols = set()
for s in all_symbols:
    if '/' in s:
        base, quote = s.split('/')
        unique_symbols.add(base)
        unique_symbols.add(quote)

symbol_types = {sym: get_symbol_type(sym) for sym in unique_symbols}

base_symbols = set()
for s in all_symbols:
    if any(s.endswith(f'/{stable}') for stable in STABLES):
        base_symbols.add(s.split('/')[0])

routes = []
for s in STABLES:
    for a in base_symbols:
        for b in base_symbols:
            if a == b:
                continue
            pair1 = f"{a}/{s}"
            if pair1 not in markets:
                continue
            if f"{b}/{a}" in markets:
                pair2 = f"{b}/{a}"
                invert2 = True
            elif f"{a}/{b}" in markets:
                pair2 = f"{a}/{b}"
                invert2 = False
            else:
                continue
            pair3 = f"{b}/{s}"
            if pair3 not in markets:
                continue
            routes.append((pair1, pair2, pair3, invert2))

print(f"\nüîÅ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(routes)}")

def get_orderbook(symbol):
    try:
        return bybit.fetch_order_book(symbol)
    except:
        return {'asks': [], 'bids': []}
     
def get_best_price(book, side, amount_needed):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Ü–µ–Ω—É –ø–æ —Å—Ç–∞–∫–∞–Ω—É, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É
    :param book: —Å–ª–æ–≤–∞—Ä—å {'asks': [...], 'bids': [...]}
    :param side: 'asks' –∏–ª–∏ 'bids'
    :param amount_needed: —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã –∏–ª–∏ USDT –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å
    :return: (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)
    """
    total = 0
    qty = 0
    for price, volume in book[side]:
        deal = price * volume
        if total + deal >= amount_needed:
            partial = (amount_needed - total) / price
            qty += partial
            total += partial * price
            break
        total += deal
        qty += volume

    if qty == 0:
        return None, 0
    avg_price = total / qty
    return avg_price, total

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    requests.post(url, data={'chat_id': CHAT_ID, 'text': text, 'parse_mode': 'HTML'})

def get_avg_price_and_qty(levels, usd_amount):
    total_cost = 0
    total_qty = 0
    for price, amount in levels:
        if price <= 0 or price > 1e6:
            continue
        cost = price * amount
        if total_cost + cost >= usd_amount:
            needed = (usd_amount - total_cost) / price
            total_qty += needed
            total_cost += needed * price
            break
        total_cost += cost
        total_qty += amount
    if total_qty == 0:
        return None, 0, 0
    avg_price = total_cost / total_qty
    if avg_price <= 0 or avg_price > 1e6:
        return None, 0, 0
    return avg_price, total_qty, total_cost

def calc_triangle(p1, p2, p3, invert2):
    base1 = p1.split('/')[0]  # –º–æ–Ω–µ—Ç–∞ A
    quote1 = p1.split('/')[1]  # USDT
    coinA = base1
    coinB = p2.split('/')[0] if not invert2 else p2.split('/')[1]  # –º–æ–Ω–µ—Ç–∞ B

    typeA = symbol_types.get(coinA, 'alt')
    typeB = symbol_types.get(coinB, 'alt')

    # –®–∞–≥ 1. –ö—É–ø–∏—Ç—å A –∑–∞ USDT (ask —Å—Ç–∞–∫–∞–Ω)
    book1 = get_orderbook(p1)
    p1_price, spent_usdt = get_best_price(book1, 'asks', TRADE_USD)
    if not p1_price:
        return
    amount_a = TRADE_USD / p1_price * (1 - FEE)
    liq1 = book1['asks'][0][0] * book1['asks'][0][1]

    # –®–∞–≥ 2. –û–±–º–µ–Ω A –Ω–∞ B
    book2 = get_orderbook(p2)
    if not book2['asks'] or not book2['bids']:
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å—Ç–∞–∫–∞–Ω–∞ –ø–æ –ª–æ–≥–∏–∫–µ:
    # 1. –ï—Å–ª–∏ A ‚Äî stable ‚áí –ø–æ–∫—É–ø–∞–µ–º B (–ø–æ asks)
    # 2. –ï—Å–ª–∏ A ‚Äî base –∏–ª–∏ alt, B ‚Äî stable ‚áí –ø—Ä–æ–¥–∞—ë–º A (–ø–æ bids)
    # 3. –ï—Å–ª–∏ A –∏ B ‚Äî alt/base ‚áí –ø–æ–∫—É–ø–∞–µ–º B (–ø–æ asks)
    if typeA == 'stable':
        p2_price, _ = get_best_price(book2, 'asks', amount_a)
        if not p2_price:
            return
        amount_b = amount_a / p2_price if invert2 else amount_a * p2_price
        amount_b *= (1 - FEE)
        liq2 = book2['asks'][0][0] * book2['asks'][0][1]

    elif typeB == 'stable':
        p2_price, _ = get_best_price(book2, 'bids', amount_a)
        if not p2_price:
            return
        amount_b = amount_a * p2_price if invert2 else amount_a / p2_price
        amount_b *= (1 - FEE)
        liq2 = book2['bids'][0][0] * book2['bids'][0][1]

    else:
        p2_price, _ = get_best_price(book2, 'asks', amount_a)
        if not p2_price:
            return
        amount_b = amount_a / p2_price if invert2 else amount_a * p2_price
        amount_b *= (1 - FEE)
        liq2 = book2['asks'][0][0] * book2['asks'][0][1]

    # –®–∞–≥ 3. –ü—Ä–æ–¥–∞—Ç—å B –∑–∞ USDT (bid —Å—Ç–∞–∫–∞–Ω)
    book3 = get_orderbook(p3)
    p3_price, total_usdt = get_best_price(book3, 'bids', amount_b)
    if not p3_price:
        return
    total_usdt = amount_b * p3_price * (1 - FEE)
    liq3 = book3['bids'][0][0] * book3['bids'][0][1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    min_liq = min(liq1, liq2, liq3)
    if min_liq < MIN_LIQUIDITY or min_liq > MAX_LIQUIDITY:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if total_usdt <= 0 or total_usdt > 10 * TRADE_USD:
        return

    profit = total_usdt - TRADE_USD
    pct = (profit / TRADE_USD) * 100

    if pct >= MIN_PROFIT_PCT:
        now = datetime.now().strftime('%H:%M:%S')
        msg = (
            f"<b>[{now}]</b>\n"
            f"üü• 1. {p1} - {p1_price:.6f}, —Å—Ç–∞–∫–∞–Ω: ${liq1:,.0f}\n"
            f"{'üü•' if typeA == 'stable' else 'üü¢'} 2. {p2} - {p2_price:.6f}, —Å—Ç–∞–∫–∞–Ω: ${liq2:,.0f}\n"
            f"üü¢ 3. {p3} - {p3_price:.6f}, —Å—Ç–∞–∫–∞–Ω: ${liq3:,.0f}\n\n"
            f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>{profit:.2f} USDT</b>\n"
            f"üìà –°–ø—Ä–µ–¥: <b>{pct:.2f}%</b>\n"
            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: <b>{min_liq:,.0f} USDT</b>"
        )
        send_telegram_message(msg)

    return profit, pct, min_liq

def run():
    while True:
        results = []
        for i, (p1, p2, p3, invert2) in enumerate(routes):
            print(f"üîç [{i+1}/{len(routes)}] {p1} ‚Üí {p2} ‚Üí {p3}")
            res = calc_triangle(p1, p2, p3, invert2)
            if res:
                profit, pct, vol = res
                results.append((p1, p2, p3, profit, pct, vol))
            time.sleep(0.1)

        results = [r for r in results if 0 < r[4] < 10]
        results.sort(key=lambda x: x[4], reverse=True)

        print("\033c")
        print("üìà –¢–û–ü-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        for i, (a, b, c, profit, pct, vol) in enumerate(results[:10]):
            color = Fore.GREEN if pct >= MIN_PROFIT_PCT else Fore.YELLOW
            print(color + f"{i+1}. {a} ‚Üí {b} ‚Üí {c}")
            print(color + f"   üîπ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit:.4f} USDT | –°–ø—Ä–µ–¥: {pct:.2f}% | –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {vol:,.0f} USDT\n")

        print("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)

if __name__ == '__main__':
    run()